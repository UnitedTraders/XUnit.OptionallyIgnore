// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XUnit.OptionallyIgnore.Tester
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StepConditionalIgnoreFeature : Xunit.IUseFixture<StepConditionalIgnoreFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public StepConditionalIgnoreFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "StepConditionalIgnore", "In order to avoid odd behaviour of OptionallyIgnore tag\nAs a simple tag user\nI wa" +
                    "nt check that methods without OptionallyIgnore tag fails when exception occurs", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
//Some other functionallity avaliable on
//https://github.com/chrismckelt/XUnit.OptionallyIgnore
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(StepConditionalIgnoreFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "Ignore tests with AssertExtension.Skip and OptionallyIgnore tag")]
        [XUnit.OptionallyIgnore.SpecFlowPlugin.OptionallyIgnoreTestFactAttribute()]
        public virtual void IgnoreTestsWithAssertExtension_SkipAndOptionallyIgnoreTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ignore tests with AssertExtension.Skip and OptionallyIgnore tag", new string[] {
                        "OptionallyIgnore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Tests ignored because of AssertExtension.Skip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "This test also will be ignored beacuse tag using is case insensitive")]
        [XUnit.OptionallyIgnore.SpecFlowPlugin.OptionallyIgnoreTestFactAttribute()]
        public virtual void ThisTestAlsoWillBeIgnoredBeacuseTagUsingIsCaseInsensitive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("This test also will be ignored beacuse tag using is case insensitive", new string[] {
                        "optionallyignore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Tests ignored because of AssertExtension.Skip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "Test success")]
        [XUnit.OptionallyIgnore.SpecFlowPlugin.OptionallyIgnoreTestFactAttribute()]
        public virtual void TestSuccess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test success", new string[] {
                        "OptionallyIgnore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Success assert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "Test fails")]
        [Xunit.FactAttribute()]
        public virtual void TestFails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test fails", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Failed assert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "This tests will fails because of OpionallyIgnore tag absence")]
        [Xunit.FactAttribute()]
        public virtual void ThisTestsWillFailsBecauseOfOpionallyIgnoreTagAbsence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("This tests will fails because of OpionallyIgnore tag absence", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Tests ignored because of AssertExtension.Skip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "This tests will fails because of mistake in tag name")]
        [Xunit.FactAttribute()]
        public virtual void ThisTestsWillFailsBecauseOfMistakeInTagName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("This tests will fails because of mistake in tag name", new string[] {
                        "OpitionallyInoredddddddd"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Tests ignored because of AssertExtension.Skip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.TraitAttribute("FeatureTitle", "StepConditionalIgnore")]
        [Xunit.TraitAttribute("Description", "This test must be ignored correctly even with two tags")]
        [XUnit.OptionallyIgnore.SpecFlowPlugin.OptionallyIgnoreTestFactAttribute()]
        public virtual void ThisTestMustBeIgnoredCorrectlyEvenWithTwoTags()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("This test must be ignored correctly even with two tags", new string[] {
                        "SomeOtherTag",
                        "OptionallyIgnore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("Some conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.Then("Tests ignored because of AssertExtension.Skip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StepConditionalIgnoreFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StepConditionalIgnoreFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
