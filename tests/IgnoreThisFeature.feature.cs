// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XUnit.OptionallyIgnore.Tester
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IgnoreThisFeatureFeature : Xunit.IUseFixture<IgnoreThisFeatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public IgnoreThisFeatureFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IgnoreThisFeature", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, new string[] {
                        "OptionallyIgnore"});
            testRunner.OnFeatureStart(featureInfo);
//More info on this add-in available at
//https://github.com/chrismckelt/XUnit.OptionallyIgnore
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            if (XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.ShouldOptionallyIgnore())
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
            }
            else
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
return;
            }
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            if (XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.ShouldOptionallyIgnore())
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
            }
            else
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
return;
            }
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            if (XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.ShouldOptionallyIgnore())
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
            }
            else
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
return;
            }
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(IgnoreThisFeatureFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [XUnit.OptionallyIgnore.SpecFlowPlugin.OptionallyIgnoreTestFactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "IgnoreThisFeature")]
        [Xunit.TraitAttribute("Description", "Add two numbers")]
        public virtual void AddTwoNumbers()
        {
            XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.OptionallyIgnore = null;
            XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.ShouldTestRun("ThisShouldRun");
            if (XUnit.OptionallyIgnore.SpecFlowPlugin.Settings.ShouldOptionallyIgnore())
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
            }
            else
            {
                // https://github.com/chrismckelt/XUnit.OptionallyIgnore
return;
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", new string[] {
                        "ThisShouldRun"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I have entered 50 into the calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("I have entered 70 into the calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("I press add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the result should be 120 on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IgnoreThisFeatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IgnoreThisFeatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
